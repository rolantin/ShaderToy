/*!
 * <info>
 *  Rotation and direction Uniform Controls test.
 * </info>
 */
#include <Fragmentarium/2D.frag>

uniform vec3 BgColor; //! color[0.8, 0.6, 0.9]
uniform mat3 Rotation; //! rotation[45, 10, 200, input: degrees]
uniform vec3 LightDir; //! direction[0, -1, 0];

float COLORS[] = float[] ( 0.359, 0.711, 0.711, 0.142, 0.219, 0.986, 0.005,
		0.531, 0.082, 0.477, 0.369, 0.464, 0.136, 0.280, 0.442, 0.673,
		0.488, 0.269, 0.982, 0.144, 0.393, 0.307, 0.874, 0.709 );

// Gamma correction factor
#define GAMMA 2.2

vec3 color(vec2 p) {
	p = fract(p);
	//p.y = 1.0 - p.y;

	p = p * 2.0 - 1.0;
	if (p.x * p.x + p.y * p.y > 1.0) {
		return BgColor;
	}
	vec3 s = vec3(p, -sqrt(1.0 - p.x * p.x - p.y * p.y));

	vec3 v = Rotation * s;

	// map colors:
	int mapX = v.x < 0.0 ? 0 : 1;
	int mapY = v.y < 0.0 ? 0 : 1;
	int mapZ = v.z < 0.0 ? 0 : 1;

	// colIndex[x][y][z] ->  x * yLen * zLen + y * zLen + z
	int colIndex = mapX * 4 + mapY * 2 + mapZ;
	colIndex *= 3;

	vec3 c = vec3(COLORS[colIndex + 2], COLORS[colIndex + 1], COLORS[colIndex]);

	float l = dot(s, -LightDir);
	c += 0.4 * l * BgColor;
	c = clamp(c, 0.0, 1.0);

	return pow(c, 1.0 / vec3(GAMMA));
}

/*!
 * <preset name="Default">
 *  AntiAlias = 1
 *  AntiAliasScale = 1.0
 *  BgColor = 0.8, 0.6, 0.9, 1.0
 *  Center = 0.26879263, -0.3644647
 *  Color = 0.7, 0.9, 0.8, 1.0
 *  LightDir = 0.21190038, -0.843125, 0.4942047
 *  Rotation = 5.357271, 5.3663244, 4.6615744
 *  Zoom = 0.7513148
 * </preset>
 */
