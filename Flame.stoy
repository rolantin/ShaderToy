/*!
 * <info>
 * <author>XT95 [https://www.shadertoy.com/user/XT95]</author>
 * <name>Flame</name>
 * 
 * <description>
 *   Simple flame in distance field.
 * </description>
 * 
 * <url>https://www.shadertoy.com/view/MdX3zr</url>
 * <tags>3d, distancefield, transparency</tags>
 * 
 * <synthclipse-importer-legal-note>
 *   As noted in: [https://www.shadertoy.com/terms]:
 *   If the author did not stated otherwise, this shader is licensed under
 *   Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License 
 *   [http://creativecommons.org/licenses/by-nc-sa/3.0/deed.en_US].
 * </synthclipse-importer-legal-note>
 * </info>
 */

uniform vec3 iResolution;           // viewport resolution (in pixels)
uniform float iGlobalTime;           // shader playback time (in seconds)
uniform float iChannelTime[4];       // channel playback time (in seconds)
uniform vec3 iChannelResolution[4]; // channel resolution (in pixels)
uniform vec4 iMouse; // mouse pixel coords. xy: current (if MLB down), zw: click
uniform vec4 iDate;                 // (year, month, day, time in seconds)

uniform bool SynthclipseCamera; //! checkbox[false]

#include <Camera>

//Thx to Las^Mercury
float noise(vec3 p) {
	vec3 i = floor(p);
	vec4 a = dot(i, vec3(1., 57., 21.)) + vec4(0., 57., 21., 78.);
	vec3 f = cos((p - i) * acos(-1.)) * (-.5) + .5;
	a = mix(sin(cos(a) * a), sin(cos(1. + a) * (1. + a)), f.x);
	a.xy = mix(a.xz, a.yw, f.y);
	return mix(a.x, a.y, f.z);
}

//-----------------------------------------------------------------------------
// Scene/Objects
//-----------------------------------------------------------------------------
float sphere(vec3 p, vec4 spr) {
	return length(spr.xyz - p) - spr.w;
}

float fire(vec3 p) {
	float d = sphere(p * vec3(1., .5, 1.), vec4(.0, -1., .0, 1.));
	return d
			+ (noise(p + vec3(.0, iGlobalTime * 2., .0)) + noise(p * 3.) * .5)
					* .25 * (p.y);
}
//-----------------------------------------------------------------------------
// Raymarching tools
//-----------------------------------------------------------------------------
float scene(vec3 p) {
	return min(100. - length(p), abs(fire(p)));
}

vec4 Raymarche(vec3 org, vec3 dir) {
	float d = 0.0;
	vec3 p = org;
	float glow = 0.0;
	float eps = 0.02;
	bool glowed = false;
	for (int i = 0; i < 64; i++) {
		d = scene(p) + eps;
		p += d * dir;
		if (d > eps) {
			if (fire(p) < .0)
				glowed = true;
			if (glowed)
				glow = float(i) / 64.;
		}
	}
	return vec4(p, glow);
}

//-----------------------------------------------------------------------------
// Main functions
//-----------------------------------------------------------------------------

void main() {
	vec2 v = -1.0 + 2.0 * gl_FragCoord.xy / iResolution.xy;
	v.x *= iResolution.x / iResolution.y;

	vec3 org, dir;
	if (SynthclipseCamera) {
		getCamera(org, dir);
	} else {
		org = vec3(0., -2., 4.);
		dir = normalize(vec3(v.x * 1.6, -v.y, -1.5));
	}

	vec4 p = Raymarche(org, dir);
	float glow = p.w;
	gl_FragColor = mix(vec4(0.),
			mix(vec4(1., .5, .1, 1.), vec4(0.1, .5, 1., 1.), p.y * .02 + .4),
			pow(glow * 2., 4.));
	//gl_FragColor = mix(vec4(1.), mix(vec4(1.,.5,.1,1.),vec4(0.1,.5,1.,1.),p.y*.02+.4), pow(glow*2.,4.));

}


/*!
 * <preset name="Default">
 *  Direction = 0.28140053, -0.088971324, -0.9554569
 *  Eye = -0.30187592, -2.0408182, 2.5464895
 *  FOV = 1.91
 *  SynthclipseCamera = false
 *  Up = -0.004094127, -0.99973494, 0.022659555
 * </preset>
 */