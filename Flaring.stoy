/*!
 * <info>
 * <author>nimitz [https://www.shadertoy.com/user/nimitz]</author>
 * <name>Flaring</name>
 *
 * <description>
 *   Procedural flares with easy to tweak settings. Using ridged noise to get sharp
 *   noise patterns.
 * </description>
 *
 * <url>https://www.shadertoy.com/view/lsSGzy</url>
 * <tags>procedural, 2d, flare</tags>
 *
 * <synthclipse-importer-legal-note>
 *   As noted in: [https://www.shadertoy.com/terms]:
 *   If the author did not stated otherwise, this shader is licensed under
 *   Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License
 *   [http://creativecommons.org/licenses/by-nc-sa/3.0/deed.en_US].
 * </synthclipse-importer-legal-note>
 * </info>
 */

uniform vec3 iResolution;           // viewport resolution (in pixels)
uniform float iGlobalTime;           // shader playback time (in seconds)
uniform float iChannelTime[4];       // channel playback time (in seconds)
uniform vec3 iChannelResolution[4]; // channel resolution (in pixels)
uniform vec4 iMouse; // mouse pixel coords. xy: current (if MLB down), zw: click
uniform vec4 iDate;                 // (year, month, day, time in seconds)

uniform sampler2D iChannel0; //! texture["Shadertoy/res/tex12.png"]

//Flaring by nimitz (stormoid.com)

uniform float brightness; //! slider[0.01,1,3]
uniform float ray_brightness; //!slider [0.01,11,20]
uniform float gamma; //! slider[0.01,5,10]
uniform float spot_brightness; //! slider[0,4,10]
uniform float ray_density; //! slider[0.01,1.5,3.0]
uniform float curvature; //! slider[0.01,0.1,100]
uniform float red; //! slider[0,7,10]
uniform float green; //! slider[0,1.3,10]
uniform float blue; //! slider[0,1,10]
//1 -> ridged, 2 -> sinfbm, 3 -> pure fbm
uniform int noisetype; //! slider[1,2,3]
uniform float sin_freq; //! slider[0,50,150]; // 50. //for type 2
uniform bool yo_dawg; //! checkbox[false];

//#define PROCEDURAL_NOISE
//#define YO_DAWG

float hash(float n) {
	return fract(sin(n) * 43758.5453);
}

float noise( in vec2 x) {
#ifdef PROCEDURAL_NOISE
	vec2 p = floor(x);
	vec2 f = fract(x);

	f = f*f*(3.0-2.0*f);

	float n = p.x + p.y*57.0;

	float res = mix(mix( hash(n+ 0.0), hash(n+ 1.0),f.x),
			mix( hash(n+ 57.0), hash(n+ 58.0),f.x),f.y);
	return res;
#else
	return texture2D(iChannel0, x * .01).x;
#endif
}

mat2 m2 = mat2(0.80, 0.60, -0.60, 0.80);
float fbm( in vec2 p) {
	float z = 2.;
	float rz;
	p *= 0.25;
	for (float i = 1.; i < 6.; i++) {
		if (noisetype == 1) {
			rz += abs((noise(p) - 0.5) * 2.) / z;
		} else if (noisetype == 2) {
			rz += (sin(noise(p) * sin_freq) * 0.5 + 0.5) / z;
		} else {
			rz += noise(p) / z;
		}
		z = z * 2.;
		p = p * 2. * m2;
	}
	return rz;
}

void main(void) {
	float t = -iGlobalTime * 0.03;
	vec2 uv = gl_FragCoord.xy / iResolution.xy - 0.5;
	uv.x *= iResolution.x / iResolution.y;
	uv *= curvature * .05 + 0.0001;

	float r = sqrt(dot(uv, uv));
	float x = dot(normalize(uv), vec2(.5, 0.)) + t;
	float y = dot(normalize(uv), vec2(.0, .5)) + t;

	if (yo_dawg) {
		x = fbm(vec2(y * ray_density * 0.5, r + x * ray_density * .2));
		y = fbm(vec2(r + y * ray_density * 0.1, x * ray_density * .5));
	}

	float val;
	val = fbm(vec2(r + y * ray_density, r + x * ray_density - y));
	val = smoothstep(gamma * .02 - .1,
			ray_brightness + (gamma * 0.02 - .1) + .001, val);
	val = sqrt(val);

	vec3 col = vec3(val / red, val / green, val / blue);
	col = clamp(1. - col, 0., 1.);
	col = mix(col, vec3(1.),
			spot_brightness - r / 0.1 / curvature * 200. / brightness);

	gl_FragColor = vec4(col, 1.0);
}
/*!
 * <preset name="Default">
 *  blue = 1.0
 *  brightness = 1.0
 *  curvature = 0.1
 *  gamma = 5.0
 *  green = 1.3
 *  iChannel0 = Shadertoy/res/tex12.png
 *  noisetype = 2
 *  ray_brightness = 11.0
 *  ray_density = 1.5
 *  red = 7.0
 *  sin_freq = 50.0
 *  spot_brightness = 4.0
 *  yo_dawg = false
 * </preset>
 */

/*!
 * <preset name="Type 2">
 *  AntiAliasScale = 1.0
 *  Center = 0.0, 0.0
 *  Zoom = 1.3310001
 *  blue = 1.0
 *  brightness = 1.5
 *  curvature = 15.0
 *  gamma = 8.0
 *  green = 1.0
 *  iChannel0 = Shadertoy/res/tex12.png
 *  noisetype = 1
 *  ray_brightness = 10.0
 *  ray_density = 3.5
 *  red = 4.0
 *  sin_freq = 13.0
 *  spot_brightness = 15.0
 *  yo_dawg = false
 * </preset>
 */

/*!
 * <preset name="Type 3">
 *  AntiAliasScale = 1.0
 *  Center = 0.0, 0.0
 *  Zoom = 1.3310001
 *  blue = 3.5
 *  brightness = 0.0997
 *  curvature = 17.0
 *  gamma = 4.0
 *  green = 7.0
 *  iChannel0 = Shadertoy/res/tex12.png
 *  noisetype = 2
 *  ray_brightness = 20.0
 *  ray_density = 3.14
 *  red = 2.9
 *  sin_freq = 15.0
 *  spot_brightness = 95.0
 *  yo_dawg = false
 * </preset>
 */

/*!
 * <preset name="Type 4">
 *  AntiAliasScale = 1.0
 *  Center = 0.0, 0.0
 *  Zoom = 1.3310001
 *  blue = 5.0
 *  brightness = 3.0
 *  curvature = 90.0
 *  gamma = 6.0
 *  green = 3.0
 *  iChannel0 = Shadertoy/res/tex12.png
 *  noisetype = 1
 *  ray_brightness = 5.0
 *  ray_density = 6.0
 *  red = 1.8
 *  sin_freq = 6.0
 *  spot_brightness = 1.5
 *  yo_dawg = true
 * </preset>
 */

/*!
 * <preset name="Type 5">
 *  AntiAliasScale = 1.0
 *  Center = 0.0, 0.0
 *  Zoom = 1.3310001
 *  blue = 4.9
 *  brightness = 2.0
 *  curvature = 1.0
 *  gamma = 5.0
 *  green = 4.0
 *  iChannel0 = Shadertoy/res/tex12.png
 *  noisetype = 2
 *  ray_brightness = 5.0
 *  ray_density = 30.0
 *  red = 1.0
 *  sin_freq = 5.0
 *  spot_brightness = 1.7
 *  yo_dawg = false
 * </preset>
 */
