/*!
 * <info>
 * <author>mafik [https://www.shadertoy.com/user/mafik]</author>
 * <name>Music waves</name>
 * 
 * <description>
 *   Waveform with background video. Based on https://www.shadertoy.com/view/4dsGzH.
 * </description>
 * 
 * <url>https://www.shadertoy.com/view/XsjGz3</url>
 * <tags>2d, waveform</tags>
 * 
 * <synthclipse-importer-legal-note>
 *   As noted in: [https://www.shadertoy.com/terms]:
 *   If the author did not stated otherwise, this shader is licensed under
 *   Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License 
 *   [http://creativecommons.org/licenses/by-nc-sa/3.0/deed.en_US].
 * </synthclipse-importer-legal-note>
 * </info>
 */

uniform vec3      iResolution;           // viewport resolution (in pixels)
uniform float     iGlobalTime;           // shader playback time (in seconds)
uniform float     iChannelTime[4];       // channel playback time (in seconds)
uniform vec3      iChannelResolution[4]; // channel resolution (in pixels)
uniform vec4      iMouse;                // mouse pixel coords. xy: current (if MLB down), zw: click
uniform vec4      iDate;                 // (year, month, day, time in seconds)

uniform sampler2D iChannel1; //! music["Shadertoy/res/mzk02.mp3"]
uniform sampler2D iChannel0; //! WARNING: Unsupported input type: "video". Source: "Shadertoy/res/vid02.ogv"

vec3 COLOR1 = vec3(0.0, 0.0, 0.3);
vec3 COLOR2 = vec3(0.5, 0.0, 0.0);
float BLOCK_WIDTH = 0.01;

void main(void)
{
	vec2 uv = gl_FragCoord.xy / iResolution.xy;
	
	vec3 final_color = vec3(1.0);
	vec3 bg_color = vec3(0.0);
	vec3 wave_color = vec3(0.0);
	
	bg_color = mix(COLOR1, COLOR2, uv.x) + texture2D(iChannel1, vec2(uv.x/8., abs(.5 - uv.y))).rgb - .7;
	bg_color += texture2D(iChannel0, fract(uv - iMouse.xy/iResolution.xy)).r/2.;
	
	float wave_width;
	uv  = -1.0 + 2.0 * uv;
	uv.y += 0.1;
	uv.x *= 2.;
	const float n = 20.;
	float prev = 0.;
	float curr = .6;
	float next = texture2D(iChannel1, vec2(0.,0.)).r;
	
	for(float i = 0.0; i < n; i++) {
		prev = curr;
		curr = next;
		next = texture2D(iChannel1, vec2((i+1.)/n,0.)).r;
		
		float a = max(0., curr * 2. - prev - next);
		
		uv.y += (1. * cos(mod(uv.x * 2. * i / n * 10. + iGlobalTime * i, 2.*3.14)) * a * a);
		uv.x += 0.1;
		
		wave_width = abs(1.0 / (200.0 * uv.y));
		
		wave_color += vec3(wave_width * 1.9, wave_width, wave_width * 1.5) * 5. / n;
	}
	
	final_color = bg_color + wave_color;
	
	
	gl_FragColor = vec4(final_color, 1.0);
}
